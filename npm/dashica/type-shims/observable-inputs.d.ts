/**
 * !!! GENERATED BY Anthropic CLAUDE !!!
 */
declare module "@observablehq/inputs" {

    /**
     * Common options shared across multiple input types
     */
    interface CommonOptions {
        /** A label; either a string or an HTML element. */
        label?: string | HTMLElement;
        /** The width of the input (not including the label). */
        width?: string | number;
        /** Whether input is disabled; defaults to false. */
        disabled?: boolean | any[];
    }

    /**
     * Options for the Button input
     */
    interface ButtonOptions extends CommonOptions {
        /** If true, the initial value defaults to undefined. */
        required?: boolean;
        /** The initial value; defaults to 0 or null if required is false. */
        value?: any;
        /** A function to update the value on click; by default returns value + 1. */
        reduce?: (value: any) => any;
    }

    /**
     * Options for checkbox-based inputs (Checkbox, Toggle, Radio)
     */
    interface CheckboxOptions<T> extends CommonOptions {
        /** True, "ascending", "descending", or a comparator function to sort keys; defaults to false. */
        sort?: boolean | "ascending" | "descending" | ((a: any, b: any) => number);
        /** True to only show unique keys; defaults to false. */
        unique?: boolean;
        /** The current locale; defaults to English. */
        locale?: string;
        /** A format function. */
        format?: (value: any) => string | HTMLElement;
        /** A function to return the key for the given element in data. */
        keyof?: (d: T) => any;
        /** A function to return the value of the given element in data. */
        valueof?: (d: T) => any;
    }

    /**
     * Options specific to the Checkbox input
     */
    interface CheckboxInputOptions extends CheckboxOptions {
        /** The initial value, an array; defaults to an empty array (no selection). */
        value?: any[];
    }

    /**
     * Options specific to the Toggle input
     */
    interface ToggleOptions extends CommonOptions {
        /** The two values to toggle between; defaults to [true, false]. */
        values?: [any, any];
        /** The initial value; defaults to the second value (false). */
        value?: any;
    }

    /**
     * Options specific to the Radio input
     */
    interface RadioOptions extends CheckboxOptions {
        /** The initial value; defaults to null (no selection). */
        value?: any;
    }

    /**
     * Options for the Range input
     */
    interface RangeOptions extends CommonOptions {
        /** The step (precision); the interval between adjacent values. */
        step?: number;
        /** A format function; defaults to formatTrim. */
        format?: (value: number) => string;
        /** A placeholder string for when the input is empty. */
        placeholder?: string;
        /** An optional non-linear transform. */
        transform?: (value: number) => number;
        /** The inverse transform. */
        invert?: (value: number) => number;
        /** A function to check whether the number input is valid. */
        validate?: (value: number) => boolean;
        /** The initial value; defaults to (min + max) / 2. */
        value?: number;
    }

    /**
     * Options for the Number input
     */
    interface NumberOptions extends RangeOptions {}

    /**
     * Options for the Search input
     */
    interface SearchOptions extends CommonOptions {
        /** The initial search terms; defaults to the empty string. */
        query?: string;
        /** A placeholder string for when the query is empty. */
        placeholder?: string;
        /** An array of columns to search; defaults to data.columns. */
        columns?: string[];
        /** The current locale; defaults to English. */
        locale?: string;
        /** A function to show the number of results. */
        format?: (value: any[]) => string;
        /** Whether to activate the browser's spell-checker. */
        spellcheck?: boolean;
        /** The autocomplete attribute, as text or boolean (true for on, false for off). */
        autocomplete?: string | boolean;
        /** The autocapitalize attribute, as text or boolean (true for on, false for off). */
        autocapitalize?: string | boolean;
        /** The filter factory: a function that receives the query and returns a filter. */
        filter?: (query: string) => (d: any, i: number) => boolean;
        /** An iterable of suggested values. */
        datalist?: Iterable<any>;
        /** If true, the search's value is all data if no query; defaults to true. */
        required?: boolean;
    }

    /**
     * Options for the Select input
     */
    interface SelectOptions<T> extends CheckboxOptions<T> {
        /** Whether to allow multiple choice; defaults to false. */
        multiple?: boolean;
        /** If multiple is true, the number of options to show. */
        size?: number;
        /** The initial value, an array if multiple choice is allowed. */
        value?: T | T[];
    }

    /**
     * Options for the Table input
     */
    interface TableOptions extends CommonOptions {
        /** The columns (property names) to show; defaults to data.columns. */
        columns?: string[];
        /** A subset of data to use as the initial selection (checked rows), or a data item if multiple is false. */
        value?: any[] | any;
        /** The maximum number of rows to show; defaults to 11.5. */
        rows?: number;
        /** The column to sort by; defaults to null (input order). */
        sort?: string | null;
        /** Whether to reverse the initial sort (descending instead of ascending). */
        reverse?: boolean;
        /** An object of column name to format function. */
        format?: Record<string, (value: any) => string>;
        /** An object of column name to "left", "right", or "center". */
        align?: Record<string, "left" | "right" | "center">;
        /** An object of column name to corresponding header; either a string or HTML element. */
        header?: Record<string, string | HTMLElement>;
        /** The table width, or an object of column name to width. */
        width?: string | number | Record<string, string | number>;
        /** The maximum table width, if any. */
        maxWidth?: string | number;
        /** The fixed table height, if any. */
        height?: string | number;
        /** The maximum table height, if any; defaults to (rows + 1) * 22 - 1. */
        maxHeight?: string | number;
        /** The table layout; defaults to fixed for â‰¤12 columns. */
        layout?: "auto" | "fixed";
        /** If true, the table's value is all data if no selection; defaults to true. */
        required?: boolean;
        /** If true, allows the user to modify the table's value by selecting rows; defaults to true. */
        select?: boolean;
        /** If true, allow multiple rows to be selected; defaults to true. */
        multiple?: boolean;
    }

    /**
     * Options for the Text input
     */
    interface TextOptions extends CommonOptions {
        /** The input type, such as "password" or "email"; defaults to "text". */
        type?: string;
        /** The initial value; defaults to the empty string. */
        value?: string;
        /** The placeholder attribute. */
        placeholder?: string;
        /** Whether to activate the browser's spell-checker. */
        spellcheck?: boolean;
        /** The autocomplete attribute, as text or boolean (true for on, false for off). */
        autocomplete?: string | boolean;
        /** The autocapitalize attribute, as text or boolean (true for on, false for off). */
        autocapitalize?: string | boolean;
        /** The pattern attribute. */
        pattern?: string;
        /** Minimum length attribute. */
        minlength?: number;
        /** Maximum length attribute. */
        maxlength?: number;
        /** Minimum value attribute; formatted appropriately, e.g. yyyy-mm-dd for the date type. */
        min?: string | number;
        /** Maximum value attribute. */
        max?: string | number;
        /** If true, the input must be non-empty; defaults to minlength > 0. */
        required?: boolean;
        /** A function to check whether the text input is valid. */
        validate?: (value: string) => boolean;
        /** Whether to require explicit submission before updating; defaults to false. */
        submit?: boolean;
        /** An iterable of suggested values. */
        datalist?: Iterable<string>;
        /** Whether input is readonly; defaults to false. */
        readonly?: boolean;
    }

    /**
     * Options for the Textarea input
     */
    interface TextareaOptions extends Omit<TextOptions, 'type'> {
        /** The number of rows of text to show. */
        rows?: number;
        /** If true, allow vertical resizing; defaults to rows < 12. */
        resize?: boolean;
        /** If true, use a monospace font. */
        monospace?: boolean;
    }

    /**
     * Options for the Date input
     */
    interface DateOptions extends Omit<TextOptions, 'type' | 'pattern' | 'minlength' | 'maxlength'> {
        /** The initial value, as a JavaScript Date or formatted as an ISO string (yyyy-mm-dd); defaults to null. */
        value?: Date | string | null;
    }

    /**
     * Options for the File input
     */
    interface FileOptions extends CommonOptions {
        /** If true, a valid file must be selected. */
        required?: boolean;
        /** A function to check whether the file input is valid. */
        validate?: (value: FileList | null) => boolean;
        /** The acceptable file types. */
        accept?: string;
        /** For capturing image or video data. */
        capture?: string;
        /** Whether to allow multiple files to be selected; defaults to false. */
        multiple?: boolean;
    }

    /**
     * Options for the Form utility
     */
    interface FormOptions {
        /** A function that takes the given inputs and returns an HTML element to display. */
        template?: (inputs: any) => HTMLElement;
    }

    // Exported functions

    /**
     * Creates a button input
     */
    function button(content?: string | HTMLElement | Array<[string | HTMLElement, (value: any) => any]>, options?: ButtonOptions): HTMLElement;

    /**
     * Creates a checkbox input
     */
    function checkbox(data: Iterable<any>, options?: CheckboxInputOptions): HTMLElement;

    /**
     * Creates a toggle input
     */
    function toggle(options?: ToggleOptions): HTMLElement;

    /**
     * Creates a radio input
     */
    function radio(data: Iterable<any>, options?: RadioOptions): HTMLElement;

    /**
     * Creates a range input
     */
    function range(extent?: [number, number], options?: RangeOptions): HTMLElement;

    /**
     * Creates a number input
     */
    function number(extent?: [number, number], options?: NumberOptions): HTMLElement;
    function number(options?: NumberOptions): HTMLElement;

    /**
     * Creates a search input
     */
    function search(data: Iterable<any>, options?: SearchOptions): HTMLElement;

    /**
     * Creates a select input
     */
    function select<T>(data: Iterable<any>, options?: SelectOptions<T>): HTMLElement & {value: T};

    /**
     * Creates a table input
     */
    function table(data: Iterable<any> | Promise<Iterable<any>>, options?: TableOptions): HTMLElement;

    /**
     * Creates a text input
     */
    function text(options?: TextOptions): HTMLElement;

    /**
     * Creates an email input
     */
    function email(options?: TextOptions): HTMLElement;

    /**
     * Creates a tel input
     */
    function tel(options?: TextOptions): HTMLElement;

    /**
     * Creates a url input
     */
    function url(options?: TextOptions): HTMLElement;

    /**
     * Creates a password input
     */
    function password(options?: TextOptions): HTMLElement;

    /**
     * Creates a color input
     */
    function color(options?: Omit<TextOptions, 'placeholder' | 'pattern' | 'spellcheck' | 'autocomplete' | 'autocapitalize' | 'min' | 'max' | 'minlength' | 'maxlength'>): HTMLElement;

    /**
     * Creates a textarea input
     */
    function textarea(options?: TextareaOptions): HTMLElement;

    /**
     * Creates a date input
     */
    function date(options?: DateOptions): HTMLElement;

    /**
     * Creates a datetime input
     */
    function datetime(options?: DateOptions): HTMLElement & { value: Date|null };

    /**
     * Creates a file input
     */
    function file(options?: FileOptions): HTMLElement;

    /**
     * Creates a compound input
     */
    function form(inputs: HTMLElement[] | Record<string, HTMLElement>, options?: FormOptions): HTMLElement;

    /**
     * Creates an input with the specified value
     */
    function input(value: any): EventTarget & { value: any };

    /**
     * Binds a target input to a source input
     */
    function bind(target: EventTarget, source: EventTarget, invalidation?: Promise<any>): void;

    /**
     * Returns a promise that resolves when the element is removed from the DOM
     */
    function disposal(element: HTMLElement): Promise<void>;

    /**
     * Returns the default query parser used by Search
     */
    function searchFilter(query: string): (d: any, i: number) => boolean;

    /**
     * Returns a function that formats a value as a string according to the specified locale
     */
    function formatLocaleAuto(locale?: string): (value: any) => string;

    /**
     * Returns a function that formats a number as a string according to the specified locale
     */
    function formatLocaleNumber(locale?: string): (value: number) => string;

    /**
     * The default number formatter used by Range
     */
    function formatTrim(value: number): string;

    /**
     * The default date formatter used by Table
     */
    function formatDate(date: Date): string;
}