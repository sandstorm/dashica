name: Build and Deploy Docs

on:
  # manual triggering - currently disabled
  #workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  sandstorm_build_assets:
    name: Build Assets
    runs-on: [self-hosted, linux]
    container:
      image: docker-hub.sandstorm.de/docker-infrastructure/php-app/build:8.4-v4
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Cache node_modules
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules/
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      # Install Node.js dependencies and build
      - name: Install dependencies and build (including server)
        run: |
          npm i
          pushd docs/
          npm run dist
          popd

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: docs/dist/
          retention-days: 7

#  sandstorm_compile:
#    name: Compile Server
#    runs-on: [self-hosted, linux]
#    container:
#      image: golang:1.24-bookworm
#    needs: sandstorm_build_assets
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          submodules: recursive
#
#      # Download build artifacts from previous job
#      - name: Download build artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: build-assets
#          path: dist/
#
#      # Cache Go dependencies
#      - name: Cache Go dependencies
#        uses: actions/cache@v4
#        with:
#          path: |
#            .gocache
#            .gomodcache
#            .go/bin
#          key: ${{ runner.os }}-go-${{ hashFiles('dashica-src/server/go.mod') }}
#          restore-keys: ${{ runner.os }}-go-
#
#      # Compile the server with embedded assets
#      - name: Compile server
#        run: |
#          mkdir -p .gocache .gomodcache .go/bin
#          export GOCACHE=$(pwd)/.gocache
#          export GOMODCACHE=$(pwd)/.gomodcache
#          export GOPATH=$(pwd)/.go
#          export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
#          cp -R dist/ dashica-src/server/dist
#          cd dashica-src
#          ./dev.sh build-server-embedded
#
#      # Upload build artifacts
#      - name: Upload build artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: dashica-server
#          path: dashica-src/server/build/dashica-server
#          retention-days: 7

#  deploy_staging:
#    name: Deploy to Staging
#    runs-on: [self-hosted, linux]
#    needs: sandstorm_compile
#    environment: staging
#    container:
#      image: docker-hub.sandstorm.de/docker-infrastructure/php-app/build:8.4-v4
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      # Determine ref slug for Docker tag (similar to CI_COMMIT_REF_SLUG)
#      - name: Get ref slug
#        id: get-ref-slug
#        run: |
#          REF_SLUG=$(echo "${{ github.ref_name }}" | sed -e 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
#          echo "REF_SLUG=$REF_SLUG" >> $GITHUB_OUTPUT
#
#      - name: Deploy to Kubernetes
#        run: |
#          # Create kubeconfig from secret
#          mkdir -p $HOME/.kube
#          echo "${{ secrets.K3S2021_KUBECONFIG_DEPLOY }}" > $HOME/.kube/config
#          chmod 600 $HOME/.kube/config
#          export KUBECONFIG=$HOME/.kube/config
#
#          # Verify connection and apply manifests
#          kubectl get namespace serious-game-staging
#
#          # update image tag
#          REF_SLUG=$(echo "${{ steps.get-ref-slug.outputs.REF_SLUG }}" | xargs)
#          sed -i "s|IMAGE_TAG|${REF_SLUG}|g" deployment/staging/app.yaml
#          # Verify the result
#          grep -A1 -B1 "${REF_SLUG}" deployment/staging/app.yaml
#
#          kubectl apply -f deployment/staging/database.yaml
#          kubectl apply -f deployment/staging/app.yaml
#
#          # Force redeploy by updating the releaseIdentifier
#          kubectl -n serious-game-staging patch --type merge OneContainerOnePort app -p "{\"spec\":{\"releaseIdentifier\": \"${{ github.run_id }}\"}}"
#
